---
# Source: geoportal/templates/pdb.yaml
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
---
# Source: geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
    prometheus: 'true'
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: http
      protocol: TCP
      name: http
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geoportal/templates/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: test-geoportal-prometheus
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  type: ClusterIP
  ports:
    - port: 80
      targetPort: prometheus
      protocol: TCP
      name: prometheus
  selector:
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
---
# Source: geoportal/templates/alembic-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-alembic
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: alembic
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: alembic
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: alembic
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      initContainers:
        - name: alembic
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                value: "main"
              - name: "PGUSER"
                value: "postgres"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - alembic --name=main upgrade head && alembic --name=static upgrade head
      containers:
        - name: sleep
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "busybox:latest"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - tail
            - -f
            - /dev/null
---
# Source: geoportal/templates/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: main
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: main
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: main
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/component
                operator: In
                values:
                - main
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - test
              - key: app.kubernetes.io/name
                operator: In
                values:
                - geoportal
            topologyKey: "kubernetes.io/hostname"
      initContainers:
        - name: config
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishdemo-config:prod-2-7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "VISIBLE_ENTRY_POINT"
                value: "/"
              - name: "VISIBLE_WEB_HOST"
                value: "example.com"
              - name: "VISIBLE_WEB_PROTOCOL"
                value: "https"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
            - bash
            - -c
            - cp -a /etc/geomapfish/* /etc/geomapfish-volume/ &&
              cp -a /usr/local/tomcat/webapps/ROOT/print-apps/* /etc/print-volume/
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: geomapfish
            - mountPath: /etc/print-volume
              name: print
      containers:
        - name: geoportal
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfishapp-geoportal:2.7"
          imagePullPolicy: IfNotPresent
          env:
              - name: "AUTHTKT_SECRET"
                value: "1234567890123456789012345678901234567890123456789012345678901234"
              - name: "PGDATABASE"
                value: "postgres"
              - name: "PGHOST"
                value: "test-pg-postgresql"
              - name: "PGHOST_SLAVE"
                value: "test-pg-postgresql"
              - name: "PGPASSWORD"
                value: "mySuperTestingPassword"
              - name: "PGPORT"
                value: "5432"
              - name: "PGPORT_SLAVE"
                value: "5432"
              - name: "PGSCHEMA"
                value: "main"
              - name: "PGUSER"
                value: "postgres"
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /usr/local/tomcat/webapps/ROOT/print-apps
              name: print
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "/c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 30
            periodSeconds: 20

      volumes:
        - name: geomapfish
          emptyDir: {}
        - name: print
          emptyDir: {}
---
# Source: geoportal/templates/tools-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: test-geoportal-tools
  labels:
    helm.sh/chart: geoportal-0.1.0
    app.kubernetes.io/version: "1.0"
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/name: geoportal
    app.kubernetes.io/instance: test
    app.kubernetes.io/component: tools
spec:
  replicas: 1
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app.kubernetes.io/name: geoportal
      app.kubernetes.io/instance: test
      app.kubernetes.io/component: tools
  template:
    metadata:
      labels:
        app.kubernetes.io/name: geoportal
        app.kubernetes.io/instance: test
        app.kubernetes.io/component: tools
    spec:

      serviceAccountName: default
      securityContext:
        runAsNonRoot: true
        runAsUser: 33
      affinity:
        {}
      containers:
        - name: tools
          securityContext:
            runAsNonRoot: true
            runAsUser: 33
          image: "camptocamp/geomapfish-tools:2.7"
          imagePullPolicy: IfNotPresent
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {}
          args:
           - sleep
           - infinity
