#!/usr/bin/env python3

import json
import subprocess
import sys
import time


def check_deployement_status(deployements):
    for deployment in deployements["items"]:
        if not deployment["status"]:
            print(f'Waiting for status for {deployment["metadata"]["name"]}')
            return False
        for condition in deployment["status"].get("conditions", []):
            if not condition["status"]:
                print(f'Not ready in {deployment["metadata"]["name"]}: {condition["message"]}')
                return False
    return True


def check_pod_status(pods):
    for pod in pods["items"]:
        for condition in pod["status"].get("conditions", []):
            if not condition["status"]:
                print(
                    f'::group::Pod not ready in {pod["metadata"]["name"]}: {condition.get("message", condition["type"])}'
                )
                print(json.dumps(condition))
                print("::endgroup::")
                return False

        def check_container_status(pod, status, is_init=False):
            good = status["ready"]
            # Ignore unable to start Gunicorn
            if not is_init and not good:
                good = status["started"]
            # Ignore unable to update the database
            if status["name"] == "alembic" and not good:
                good |= status["state"].get("waiting", {}).get("reason") == "CrashLoopBackOff"
                good |= status["state"].get("terminated", {}).get("reason") == "Error"
            if status["name"] == "sleep" and not good:
                good = True

            if not good:
                waiting = status["state"].get("waiting")
                terminated = status["state"].get("terminated")
                state = waiting | terminated
                status_message = state.get("message", state.get("reason", "")) if state else ""
                status_message = status_message.trim()
                print(f'::group::Container not ready in {pod["metadata"]["name"]}: {status_message}')
                print(json.dumps(status))
                print("::endgroup::")
                return False
            return True

        for status in pod["status"].get("initContainerStatuses", []):
            if not check_container_status(pod, status, True):
                return False
        for status in pod["status"].get("containerStatuses", []):
            if not check_container_status(pod, status):
                return False

    return True


def main() -> None:
    for _ in range(20):
        time.sleep(10)
        success = True
        deployments = subprocess.run(
            ["kubectl", "get", "deployments", "--output=json"],
            stdout=subprocess.PIPE,
            check=True,
        )
        success &= check_deployement_status(json.loads(deployments.stdout))
        pods = subprocess.run(
            ["kubectl", "get", "pods", "--output=json"],
            stdout=subprocess.PIPE,
            check=True,
        )
        success &= check_pod_status(json.loads(pods.stdout))
        if success:
            sys.exit(0)
    sys.exit(1)


if __name__ == "__main__":
    main()
