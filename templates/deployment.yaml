apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "geoportal.fullname" . }}
  labels:
{{ include "geoportal.labels" . | indent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels:
      {{- include "geoportal.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      labels:
      {{- include "geoportal.selectorLabels" . | nindent 8 }}
    spec:
    {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
    {{- end }}
      serviceAccountName: {{ template "geoportal.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: config
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.config.image.sha }}
          image: "{{ .Values.config.image.repository }}@sha256:{{ .Values.config.image.sha }}"
          {{- else }}
          image: "{{ .Values.config.image.repository }}:{{ .Values.config.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/ && cp -a /etc/gunicorn/* /etc/gunicorn-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
          {{- if and ( not ( empty .Values.config.env ) ) ( not ( empty .Values.config.configMapEnv ) ) ( not ( empty .Values.config.secretEnv ) ) }}
          env:
            {{- range $name, $value := .Values.config.env }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := .Values.config.configMapEnv }}
            - name: {{ $name | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name | quote }}
                  key: {{ $value.key | quote }}
            {{- end }}
            {{- range $name, $value := .Values.config.secretEnv }}
            - name: {{ $name | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name | quote }}
                  key: {{ $value.key | quote }}
            {{- end }}
          {{- end }}
          terminationMessagePolicy: FallbackToLogsOnError
          resources:
            {{- toYaml .Values.config.resources | nindent 12 }}
      containers:
        - name: geoportal
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          {{- if .Values.image.sha }}
          image: "{{ .Values.image.repository }}@sha256:{{ .Values.image.sha }}"
          {{- else }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          {{- end }}
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- if and ( not ( empty .Values.env ) ) ( not ( empty .Values.configMapEnv ) ) ( not ( empty .Values.secretEnv ) ) }}
          env:
            {{- range $name, $value := .Values.env }}
            - name: {{ $name | quote }}
              value: {{ $value | quote }}
            {{- end }}
            {{- range $name, $value := .Values.configMapEnv }}
            - name: {{ $name | quote }}
              valueFrom:
                configMapKeyRef:
                  name: {{ $value.name | quote }}
                  key: {{ $value.key | quote }}
            {{- end }}
            {{- range $name, $value := .Values.config.secretEnv }}
            - name: {{ $name | quote }}
              valueFrom:
                secretKeyRef:
                  name: {{ $value.name | quote }}
                  key: {{ $value.key | quote }}
            {{- end }}
          {{- end }}
          terminationMessagePolicy: FallbackToLogsOnError
          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /etc/gunicorn
              name: gunicorn
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level={{ .Values.healthCheckLevel }}"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: configs
          emptyDir: {}
        - name: gunicorn
          emptyDir: {}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      affinity:
      {{-   if .Values.affinity }}
      {{      toYaml .Values.affinity | indent 2 }}
      {{-   else }}
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: app.kubernetes.io/name
                operator: In
                values:
                - {{ include "geoportal.name" . }}
              - key: app.kubernetes.io/instance
                operator: In
                values:
                - {{ .Release.Name }}
            topologyKey: "kubernetes.io/hostname"
      {{- end }}
    {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
    {{- end }}
