apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" ( dict "root" . "service" .Values ) }}
  labels: {{ include "common.labels" ( dict "root" . "service" .Values ) | nindent 4 }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels: {{- include "common.selectorLabels" ( dict "root" . "service" .Values ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.selectorLabels" ( dict "root" . "service" .Values ) | nindent 8 }}
    spec: {{- include "common.podConfig" ( dict
          "root" .
          "service" .Values
          "affinitySelector" (dict
            "app.kubernetes.io/instance" .Release.Name
            "app.kubernetes.io/name" ( include "common.name" ( dict "root" . "service" .Values.sub ) )
            "app.kubernetes.io/component" "main"
          )) | nindent 6 }}
      initContainers:
        - name: config
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.config ) | nindent 10 }}
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/ && cp -a /etc/gunicorn/* /etc/gunicorn-volume/']
          volumeMounts:
            - mountPath: /etc/config-volume
              name: configs
      containers:
        - name: geoportal
          {{- include "common.containerConfig" ( dict "root" . "container" .Values ) | nindent 10 }}
          volumeMounts:
            - mountPath: /etc/geomapfish
              name: geomapfish
              readOnly: true
            - mountPath: /etc/gunicorn
              name: gunicorn
              readOnly: true
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level=0"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          readinessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level={{ .Values.healthCheckLevel }}"
              port: http
            initialDelaySeconds: 10
            timeoutSeconds: 30
            periodSeconds: 20
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      volumes:
        - name: configs
          emptyDir: {}
        - name: gunicorn
          emptyDir: {}
