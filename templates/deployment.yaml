apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "common.fullname" ( dict "root" . "service" .Values ) }}
  labels: {{ include "common.labels" ( dict "root" . "service" .Values ) | nindent 4 }}
  {{- with .Values.annotations }}
  annotations:
    {{- toYaml . | nindent 4 }}
  {{- end }}
spec:
  replicas: {{ .Values.replicaCount }}
  strategy:
    type: RollingUpdate
  selector:
    matchLabels: {{- include "common.selectorLabels" ( dict "root" . "service" .Values ) | nindent 6 }}
  template:
    metadata:
      labels: {{- include "common.selectorLabels" ( dict "root" . "service" .Values ) | nindent 8 }}
      {{- range $key, $value := .Values.podLabels }}
        {{ $key }}: {{ $value }}
      {{- end }}
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
    spec: {{- include "common.podConfig" ( dict "root" . "service" .Values "affinitySelector" (dict "app.kubernetes.io/instance" .Release.Name "app.kubernetes.io/name" ( include "common.name" ( dict "root" . "service" .Values ) ) "app.kubernetes.io/component" "main" )) | nindent 6 }}
      initContainers:
        - name: config
          {{- include "common.containerConfig" ( dict "root" . "container" .Values.config ) | nindent 10 }}
          args: ['bash', '-c', 'cp -a /etc/geomapfish/* /etc/geomapfish-volume/']
          volumeMounts:
            - mountPath: /etc/geomapfish-volume
              name: configs
      containers:
        - name: geoportal
          {{- include "common.containerConfig" ( dict "root" . "container" .Values ) | nindent 10 }}

          volumeMounts:
            - mountPath: /etc/geomapfish
              name: configs
              readOnly: true

          ports:
            - name: http
              containerPort: 8080
              protocol: TCP

          livenessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level={{ .Values.probe.liveness.healthCheckLevel }}"
              port: http
            initialDelaySeconds: {{ .Values.probe.liveness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probe.liveness.timeoutSeconds }}
            periodSeconds: {{ .Values.probe.liveness.periodSeconds }}
          readinessProbe:
            httpGet:
              path: "{{ .Values.entrypoint }}c2c/health_check?max_level={{ .Values.probe.readiness.healthCheckLevel }}"
              port: http
            initialDelaySeconds: {{ .Values.probe.readiness.initialDelaySeconds }}
            timeoutSeconds: {{ .Values.probe.readiness.timeoutSeconds }}
            periodSeconds: {{ .Values.probe.readiness.periodSeconds }}

      volumes:
        - name: configs
          emptyDir: {}
